name: Vercel Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID || 'dummy-org-id' }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID || 'dummy-project-id' }}
  NODE_VERSION: '18'

jobs:
  parallel-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration', 'e2e']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install Dependencies
        run: |
          npm run install-deps
          if [[ "${{ matrix.test-type }}" == "e2e" ]]; then
            cd e2e
            npm install
            cd ..
          fi

      # Start MongoDB for integration tests
      - name: Start MongoDB
        if: matrix.test-type == 'integration'
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: '6.0'
          mongodb-port: 27017

      # Start application for E2E tests
      - name: Start Application for E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run build
          npm run start & # Start in background
          sleep 10 # Wait for app to start
        env:
          CI: true
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test
          AI_API_KEY: dummy-key
          SKIP_PREFLIGHT_CHECK: true
          NODE_OPTIONS: --openssl-legacy-provider

      # Run tests based on matrix type
      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: npm run test:client
        env:
          CI: true
          SKIP_PREFLIGHT_CHECK: true

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: npm run test:server
        env:
          CI: true
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test
          AI_API_KEY: dummy-key

      - name: Run E2E Tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e
        env:
          CI: true
          CYPRESS_BASE_URL: http://localhost:3000

  deploy:
    needs: [parallel-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install Dependencies
        run: |
          npm install
          npm run install-deps
          npm audit fix --force
      - name: Security Audit and Fix
        run: npm run apply-security-fixes
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: |
          # Try to pull environment info, but continue even if it fails
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN || 'dummy-token' }} || echo "Vercel pull failed, but continuing with deployment"
      - name: Build Project Artifacts
        env:
          REACT_APP_GEMINI_API_KEY: ${{ secrets.REACT_APP_GEMINI_API_KEY || 'dummy-key' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI || 'mongodb://localhost:27017/test' }}
          AI_API_KEY: ${{ secrets.AI_API_KEY || 'dummy-key' }}
          NODE_ENV: production
          SKIP_PREFLIGHT_CHECK: true
          NODE_OPTIONS: --openssl-legacy-provider
        run: |
          # Try to build with Vercel, fallback to regular build if it fails
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN || 'dummy-token' }} || npm run build
      - name: Blue-Green Deployment to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || 'dummy-token' }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
          PRODUCTION_DOMAIN: ${{ secrets.PRODUCTION_DOMAIN || 'chatbot-fluxa.com' }}
          BLUE_DOMAIN: ${{ secrets.BLUE_DOMAIN || 'blue.chatbot-fluxa.com' }}
          GREEN_DOMAIN: ${{ secrets.GREEN_DOMAIN || 'green.chatbot-fluxa.com' }}
        run: |
          # Run blue-green deployment
          npm run deploy:blue-green

      - name: Verify Deployment
        run: |
          # Verify the deployment by checking the health endpoint
          DOMAIN="${{ secrets.PRODUCTION_DOMAIN || 'chatbot-fluxa.com' }}"
          HEALTH_URL="https://${DOMAIN}/api/health"

          echo "Verifying deployment at $HEALTH_URL"

          # Try up to 5 times with a 10-second delay between attempts
          for i in {1..5}; do
            echo "Attempt $i/5..."
            if curl -s "$HEALTH_URL" | grep -q '"status":"ok"'; then
              echo "Deployment verified successfully!"
              exit 0
            else
              echo "Verification failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

          echo "Deployment verification failed after 5 attempts"
          exit 1
